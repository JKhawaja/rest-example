// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "GitHub SSH Keys": keys Resource Client
//
// Command:
// $ goagen
// --design=github.com/JKhawaja/replicated/design
// --out=$(GOPATH)\src\github.com\JKhawaja\replicated
// --version=v1.2.0-dirty

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// ListKeysPayload is the keys list action payload.
type ListKeysPayload []string

// ListKeysPath computes a request path to the list action of keys.
func ListKeysPath() string {

	return fmt.Sprintf("/keys")
}

// Given a list of GitHub usernames, responds with list of public SSH keys for each User (associated to their GitHub account).
func (c *Client) ListKeys(ctx context.Context, path string, payload ListKeysPayload) (*http.Response, error) {
	req, err := c.NewListKeysRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListKeysRequest create the request corresponding to the list action endpoint of the keys resource.
func (c *Client) NewListKeysRequest(ctx context.Context, path string, payload ListKeysPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}
