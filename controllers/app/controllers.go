// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "GitHub SSH Keys": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/JKhawaja/rest-example/ssot
// --out=$(GOPATH)\src\github.com\JKhawaja\rest-example\controllers
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/encoding/json"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(json.NewEncoder, "application/json")
	service.Decoder.Register(json.NewDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(json.NewEncoder, "*/*")
	service.Decoder.Register(json.NewDecoder, "*/*")
}

// HealthController is the controller interface for the Health actions.
type HealthController interface {
	goa.Muxer
	Healthcheck(*HealthcheckHealthContext) error
}

// MountHealthController "mounts" a Health resource controller on the given service.
func MountHealthController(service *goa.Service, ctrl HealthController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewHealthcheckHealthContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Healthcheck(rctx)
	}
	service.Mux.Handle("GET", "/health", ctrl.MuxHandler("healthcheck", h, nil))
	service.LogInfo("mount", "ctrl", "Health", "action", "Healthcheck", "route", "GET /health")
}

// KeysController is the controller interface for the Keys actions.
type KeysController interface {
	goa.Muxer
	List(*ListKeysContext) error
}

// MountKeysController "mounts" a Keys resource controller on the given service.
func MountKeysController(service *goa.Service, ctrl KeysController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListKeysContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(ListKeysPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.List(rctx)
	}
	service.Mux.Handle("POST", "/keys", ctrl.MuxHandler("list", h, unmarshalListKeysPayload))
	service.LogInfo("mount", "ctrl", "Keys", "action", "List", "route", "POST /keys")
}

// unmarshalListKeysPayload unmarshals the request body into the context request data Payload field.
func unmarshalListKeysPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	var payload ListKeysPayload
	if err := service.DecodeRequest(req, &payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload
	return nil
}
